trigger:
  - main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  frontPath: './EmployeeCrudAngular/EmployeeCrudAngular/EmployeeCrudAngular'
  backPath: './EmployeeCrudApi'
  ConnectedServiceName: 'Azure subscription 1'
  acrLoginServer: 'vvingsoft3uccacr.azurecr.io'
  backImageName: 'miwebapp1'

stages:
  - stage: BuildAndTest
    displayName: "Build and Test API and Front"
    jobs:
      - job: BuildDotnet
        displayName: "Build and Test API"
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self
            fetchDepth: 0

          - task: DotNetCoreCLI@2
            displayName: 'Restaurar paquetes NuGet'
            inputs:
              command: restore
              projects: '$(solution)'

          - task: DotNetCoreCLI@2
            displayName: 'Ejecutar pruebas de la API'
            inputs:
              command: 'test'
              projects: '**/*.Tests.csproj'
              arguments: '--collect:"XPlat Code Coverage"'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publicar resultados de code coverage del back-end'
            inputs:
              summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
              failIfCoverageEmpty: false

          - task: SonarCloudPrepare@2
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'viickyvaccarini2'
              scannerMode: 'MSBuild'
              projectKey: 'ViickyVaccarini2_Angular_WebAPINetCore8_CRUD_Sample_Backend'
              projectName: 'Angular_WebAPINetCore8_CRUD_Sample_Backend'
              extraProperties:
                sonar.tests = EmployeeCrudApi.Tests/
                sonar.sources = $(backPath)

          - task: DotNetCoreCLI@2
            displayName: 'Compilar la API'
            inputs:
              command: build
              projects: '$(solution)'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'Publicar aplicación'
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: SonarCloudAnalyze@2
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          - task: SonarCloudPublish@2
            inputs:
              pollingTimeoutSec: '300'

          - task: PublishBuildArtifacts@1
            displayName: 'Publicar artefactos de compilación'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'dotnet-drop'
              publishLocation: 'Container'

          # Publicar Dockerfile de Back
          - task: PublishBuildArtifacts@1
            displayName: 'Publicar Dockerfile de Back'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/docker/api/dockerfile'
              ArtifactName: 'dockerfile-back'

      - job: BuildAngular
        displayName: "Build and Test Angular"
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self
            fetchDepth: 0

          - task: NodeTool@0
            displayName: 'Instalar Node.js'
            inputs:
              versionSpec: '22.x'

          - script: npm install
            displayName: 'Instalar dependencias'
            workingDirectory: '$(frontPath)'

          - script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
            displayName: 'Ejecutar pruebas del front'
            workingDirectory: '$(frontPath)'
            continueOnError: true  

          - task: PublishCodeCoverageResults@2
            displayName: 'Publicar resultados de code coverage del front'
            inputs:
              summaryFileLocation: '$(frontPath)/coverage/lcov.info'
              failIfCoverageEmpty: false
            condition: always()

          - task: PublishTestResults@2
            displayName: 'Publicar resultados de pruebas unitarias del front'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(frontPath)/test-results/test-results.xml'
              failTaskOnFailedTests: true
            condition: always()

          - task: SonarCloudPrepare@2
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'viickyvaccarini2'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'ViickyVaccarini2_Angular_WebAPINetCore8_CRUD_Sample_Frontend'
              cliProjectName: 'Angular_WebAPINetCore8_CRUD_Sample_Frontend'
              cliSources: '$(frontPath)/src'

          - script: npm run build
            displayName: 'Compilar el proyecto Angular'
            workingDirectory: '$(frontPath)'

          - task: SonarCloudAnalyze@2
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          - task: SonarCloudPublish@2
            inputs:
              pollingTimeoutSec: '300'

          - task: PublishBuildArtifacts@1
            displayName: 'Publicar artefactos Angular'
            inputs:
              PathtoPublish: '$(frontPath)/dist'
              ArtifactName: 'angular-drop'

          # Publicar Dockerfile de Front
          - task: PublishBuildArtifacts@1
            displayName: 'Publicar Dockerfile de Front'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/docker/front/dockerfile'
              ArtifactName: 'dockerfile-front'

  - stage: Deploy
    displayName: 'Deploy API to QA'
    dependsOn: BuildAndTest
    condition: succeeded()
    pool:
      vmImage: 'windows-latest'

    jobs:
      - job: DeployBack
        displayName: 'Deploy Backend'
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'dotnet-drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webApp'
              WebAppName: 'MiWebApp1'
              package: '$(System.ArtifactsDirectory)/dotnet-drop/**/*.zip'

      - job: DeployFront
        displayName: 'Deploy Front-End to QA'
        steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'angular-drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              azureSubscription: 'Azure subscription 1'
              appType: 'webApp'
              WebAppName: 'MiWebApp1-PROD'
              package: '$(System.ArtifactsDirectory)/angular-drop/employee-crud-angular/browser'

      - job: RunCypressTests
        displayName: 'Run Cypress Tests'
        dependsOn: [DeployFront, DeployBack]
        condition: succeeded()
        steps:
          - script: npm install ts-node typescript mocha-junit-reporter --save-dev
            displayName: 'Install typescript and mocha-junit-reporter'
            workingDirectory: '$(frontPath)'

          - script: npx cypress run
            workingDirectory: '$(frontPath)'
            displayName: 'Run integration tests'
            continueOnError: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'cypress/results/results-*.xml' 
              searchFolder: '$(frontPath)' 
              testRunTitle: 'Cypress Integration Tests'

  # #----------------------------------------------------------
  # ### STAGE BUILD DOCKER IMAGES Y PUSH A AZURE CONTAINER REGISTRY
  # #----------------------------------------------------------

  - stage: DockerBuildAndPush
    displayName: 'Construir y Subir Imágenes Docker a ACR'
    dependsOn: BuildAndTest
    jobs:
      - job: docker_build_and_push
        displayName: 'Construir y Subir Imágenes Docker a ACR'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self

          #----------------------------------------------------------
          # BUILD DOCKER BACK IMAGE Y PUSH A AZURE CONTAINER REGISTRY
          #----------------------------------------------------------

          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Artefactos de Back'
            inputs:
              buildType: 'current'
              artifactName: 'dotnet-drop'
              targetPath: '$(Pipeline.Workspace)/dotnet-drop'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Dockerfile de Back'
            inputs:
              buildType: 'current'
              artifactName: 'dockerfile-back'
              targetPath: '$(Pipeline.Workspace)/dockerfile-back'

          - task: AzureCLI@2
            displayName: 'Iniciar Sesión en Azure Container Registry (ACR)'
            inputs:
              azureSubscription: '$(ConnectedServiceName)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(acrLoginServer)

          - task: Docker@2
            displayName: 'Construir Imagen Docker para Back'
            inputs:
              command: build
              repository: '$(acrLoginServer)/$(backImageName)'
              dockerfile: '$(Pipeline.Workspace)/dockerfile-back/dockerfile'
              buildContext: '$(Pipeline.Workspace)/dotnet-drop'
              tags: 'latest'

          - task: Docker@2
            displayName: 'Subir Imagen Docker de Back a ACR'
            inputs:
              command: push
              repository: '$(acrLoginServer)/$(backImageName)'
              tags: 'latest'
